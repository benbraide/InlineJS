import { Stack } from "../stack";
import { ChangeCallbackType, IBubbledChange, IChange } from "../types/change";
import { IChanges } from "../types/changes";
import { ChangesMonitor } from "./changes-monitor";
export declare class Changes extends ChangesMonitor implements IChanges {
    protected componentId_: string;
    protected nextTickHandlers_: (() => void)[];
    protected nextIdleHandlers_: (() => void)[];
    protected nextNonIdleHandlers_: (() => void)[];
    protected isScheduled_: boolean;
    protected isIdle_: boolean;
    protected isDestroyed_: boolean;
    protected list_: (IChange | IBubbledChange)[];
    protected subscribers_: Record<string, Record<string, ChangeCallbackType>>;
    protected subscriberPaths_: Record<string, string>;
    protected origins_: Stack<ChangeCallbackType>;
    protected recentRemovals_: Array<ChangeCallbackType> | null;
    constructor(componentId_: string);
    GetComponentId(): string;
    AddNextTickHandler(handler: () => void): void;
    AddNextIdleHandler(handler: () => void): void;
    AddNextNonIdleHandler(handler: () => void): void;
    Schedule(): void;
    Add(change: IChange | IBubbledChange): void;
    AddComposed(prop: string, prefix?: string, targetPath?: string): void;
    GetLastChange(index?: number): IChange | IBubbledChange | null;
    PushOrigin(origin: ChangeCallbackType): void;
    PeekOrigin(): ChangeCallbackType | null;
    PopOrigin(): ChangeCallbackType | null;
    Subscribe(path: string, handler: ChangeCallbackType): string;
    Unsubscribe(subscribed: ChangeCallbackType | string, path?: string): void;
    Destroy(): void;
    protected Unsubscribe_(id: string): void;
}
