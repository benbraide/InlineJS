import { ChangesMonitor } from "../component/changes-monitor";
import { DirectiveManager } from "../directive/manager";
import { MagicManager } from "../magic/manager";
import { MutationObserver } from "../observers/mutation";
import { ResizeObserver } from "../observers/resize";
import { Stack } from "../stack";
import { IComponent } from "../types/component";
import { IConfig, IConfigOptions } from "../types/config";
import { IFetchConcept } from "../types/fetch";
import { ComponentsMonitorType, IObjectRetrievalParams, IObjectStoreParams, IGlobal } from "../types/global";
import { AttributeProcessorType, IAttributeProcessorParams, ITextContentProcessorParams, TextContentProcessorType } from "../types/process";
import { IProxy } from "../types/proxy";
import { IScope } from "../types/scope";
import { Future } from "../values/future";
import { Nothing } from "../values/nothing";
import { NativeFetchConcept } from "./native-fetch";
import { IProxyAccessStorage } from "../types/storage";
import { RangeValueType, Range } from "../values/range";
export declare class BaseGlobal extends ChangesMonitor implements IGlobal {
    protected nothing_: Nothing;
    protected config_: IConfig;
    protected currentProxyAccessStorage_: IProxyAccessStorage | null;
    protected storedObjects_: Record<string, any>;
    protected lastStoredObjectKey_: string;
    protected componentsMonitorList_: ComponentsMonitorType[];
    protected components_: Record<string, IComponent>;
    protected currentComponent_: Stack<string>;
    protected scopeContext_: Stack<IScope>;
    protected attributeProcessors_: AttributeProcessorType[];
    protected textContentProcessors_: TextContentProcessorType[];
    protected customElements_: Record<string, CustomElementConstructor>;
    protected managers_: {
        directive: DirectiveManager;
        magic: MagicManager;
    };
    protected uniqueMarkers_: import("..").IUniqueMarkers;
    protected mutationObserver_: MutationObserver;
    protected resizeObserver_: ResizeObserver;
    protected nativeFetch_: NativeFetchConcept;
    protected fetchConcept_: IFetchConcept | null;
    protected concepts_: Record<string, any>;
    constructor(configOptions?: IConfigOptions, idOffset?: number);
    SwapConfig(config: IConfig): void;
    GetConfig(): IConfig;
    SetCurrentProxyAccessStorage(storage: IProxyAccessStorage | null): IProxyAccessStorage | null;
    GetCurrentProxyAccessStorage(): IProxyAccessStorage | null;
    UseProxyAccessStorage<T = any>(callback: (storage: IProxyAccessStorage) => T | undefined, storage?: IProxyAccessStorage | null): T | undefined;
    SuspendProxyAccessStorage<T = any>(callback: () => T | undefined): T | undefined;
    GenerateUniqueId(prefix?: string, suffix?: string): string;
    StoreObject({ object, componentId, contextElement }: IObjectStoreParams): string;
    RetrieveObject(params: IObjectRetrievalParams): any;
    PeekObject(params: IObjectRetrievalParams): any;
    GetLastObjectKey(): string;
    AddComponentMonitor(monitor: ComponentsMonitorType): void;
    RemoveComponentMonitor(monitor: ComponentsMonitorType): void;
    CreateComponent(root: HTMLElement): IComponent;
    RemoveComponent(component: IComponent | string): void;
    TraverseComponents(callback: (component: IComponent) => void | boolean): void;
    FindComponentById(id: string): IComponent | null;
    FindComponentByName(name: string): IComponent | null;
    FindComponentByRoot(root: HTMLElement | null): IComponent | null;
    FindComponentByCallback(callback: (component: IComponent) => boolean): IComponent | null;
    PushCurrentComponent(componentId: string): void;
    PopCurrentComponent(): string | null;
    PeekCurrentComponent(): string | null;
    GetCurrentComponent(): IComponent | null;
    InferComponentFrom(element: HTMLElement | null): IComponent | null;
    PushScopeContext(scope: IScope): void;
    PopScopeContext(): IScope | null;
    PeekScopeContext(): IScope | null;
    GetDirectiveManager(): DirectiveManager;
    GetMagicManager(): MagicManager;
    AddAttributeProcessor(processor: AttributeProcessorType): void;
    DispatchAttributeProcessing(params: IAttributeProcessorParams): void;
    AddTextContentProcessor(processor: TextContentProcessorType): void;
    DispatchTextContentProcessing(params: ITextContentProcessorParams): void;
    GetMutationObserver(): MutationObserver;
    GetResizeObserver(): ResizeObserver;
    SetFetchConcept(concept: IFetchConcept | null): void;
    GetFetchConcept(): IFetchConcept;
    SetConcept<T>(name: string, concept: T): void;
    RemoveConcept(name: string): void;
    GetConcept<T>(name: string): T | null;
    AddCustomElement(name: string, constructor: CustomElementConstructor): void;
    FindCustomElement(name: string): CustomElementConstructor | null;
    CreateChildProxy(owner: IProxy, name: string, target: any): IProxy;
    CreateFuture(callback: () => any): Future;
    IsFuture(value: any): boolean;
    CreateNothing(): Nothing;
    IsNothing(value: any): boolean;
    CreateRange<T extends RangeValueType>(from: T, to: T): Range<T>;
    IsRange(value: any): boolean;
    protected RetrieveObject_({ key, componentId, contextElement }: IObjectRetrievalParams, remove: boolean): any;
    protected DispatchProcessing_(processors: Array<AttributeProcessorType | TextContentProcessorType>, params: IAttributeProcessorParams | ITextContentProcessorParams, contextString: string): void;
}
