import { DirectiveManager } from "../directive/manager";
import { MagicManager } from "../magic/manager";
import { MutationObserver } from "../observers/mutation";
import { IComponent } from "../types/component";
import { IConfig, IConfigOptions } from "../types/config";
import { IFetchConcept } from "../types/fetch";
import { ComponentsMonitorType, IGlobal } from "../types/global";
import { AttributeProcessorType, IAttributeProcessorParams, ITextContentProcessorParams, TextContentProcessorType } from "../types/process";
import { IProxy } from "../types/proxy";
import { Future } from "../values/future";
import { Nothing } from "../values/nothing";
export declare class BaseGlobal implements IGlobal {
    private nothing_;
    private config_;
    private componentsMonitorList_;
    private components_;
    private currentComponent_;
    private attributeProcessors_;
    private textContentProcessors_;
    private managers_;
    private uniqueMarkers_;
    private mutationObserver_;
    private nativeFetch_;
    private fetchConcept_;
    private concepts_;
    constructor(configOptions?: IConfigOptions, idOffset?: number);
    SwapConfig(config: IConfig): void;
    GetConfig(): IConfig;
    GenerateUniqueId(prefix?: string, suffix?: string): string;
    AddComponentMonitor(monitor: ComponentsMonitorType): void;
    RemoveComponentMonitor(monitor: ComponentsMonitorType): void;
    CreateComponent(root: HTMLElement): IComponent;
    RemoveComponent(component: IComponent | string): void;
    TraverseComponents(callback: (component: IComponent) => void | boolean): void;
    FindComponentById(id: string): IComponent | null;
    FindComponentByName(name: string): IComponent | null;
    FindComponentByRoot(root: HTMLElement): IComponent | null;
    PushCurrentComponent(componentId: string): void;
    PopCurrentComponent(): string | null;
    PeekCurrentComponent(): string | null;
    GetCurrentComponent(): IComponent | null;
    InferComponentFrom(element: HTMLElement | null): IComponent | null;
    GetDirectiveManager(): DirectiveManager;
    GetMagicManager(): MagicManager;
    AddAttributeProcessor(processor: AttributeProcessorType): void;
    DispatchAttributeProcessing(params: IAttributeProcessorParams): void;
    AddTextContentProcessor(processor: TextContentProcessorType): void;
    DispatchTextContentProcessing(params: ITextContentProcessorParams): void;
    GetMutationObserver(): MutationObserver;
    SetFetchConcept(concept: IFetchConcept | null): void;
    GetFetchConcept(): IFetchConcept;
    SetConcept<T>(name: string, concept: T): void;
    RemoveConcept(name: string): void;
    GetConcept<T>(name: string): T | null;
    CreateChildProxy(owner: IProxy, name: string, target: any): IProxy;
    CreateFuture(callback: () => any): Future;
    IsFuture(value: any): boolean;
    CreateNothing(): Nothing;
    IsNothing(value: any): boolean;
}
