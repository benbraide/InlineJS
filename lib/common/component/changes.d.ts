import { ChangeCallbackType, IBubbledChange, IChange } from "../types/change";
import { IChanges } from "../types/changes";
import { ChangesMonitor } from "./changes-monitor";
export declare class Changes extends ChangesMonitor implements IChanges {
    private componentId_;
    private nextTickHandlers_;
    private nextIdleHandlers_;
    private nextNonIdleHandlers_;
    private isScheduled_;
    private isIdle_;
    private isDestroyed_;
    private list_;
    private subscribers_;
    private subscriberPaths_;
    private origins_;
    constructor(componentId_: string);
    GetComponentId(): string;
    AddNextTickHandler(handler: () => void): void;
    AddNextIdleHandler(handler: () => void): void;
    AddNextNonIdleHandler(handler: () => void): void;
    Schedule(): void;
    Add(change: IChange | IBubbledChange): void;
    AddComposed(prop: string, prefix?: string, targetPath?: string): void;
    GetLastChange(index?: number): IChange | IBubbledChange | null;
    PushOrigin(origin: ChangeCallbackType): void;
    PeekOrigin(): ChangeCallbackType | null;
    PopOrigin(): ChangeCallbackType | null;
    Subscribe(path: string, handler: ChangeCallbackType): string;
    Unsubscribe(subscribed: ChangeCallbackType | string, path?: string): void;
    Destroy(): void;
    private Unsubscribe_;
}
